namespace hpServer.threadPool

subThreadFunc = function(hwnd,uid,pSocket,callback){
    //提供回调函数功能
    table.mixin(global,callback)
    
    import win;
    import console;
    import hpServer.helper;
    import hpServer.message;
    import web.json;
    import hpsocket.helper.headers;//
    
    var o_hwnd	= hwnd;
    var t_uid	= uid;
    var t_id	= thread.getId();
    var print 	= io.print;
    var realloc = raw.realloc;

    /*-----线程初始化过程--------*/
    ..global.import("hpsocket.httpServer");
	var socket = eval("hpsocket.httpServer")
    
    socket = socket(pSocket)
	//线程初始化函数
	if (onThreadCreated) {
		onThreadCreated(socket,t_id)
	}
	/*-----失败后需要SendMsg (0x62),确保错误可以正确反馈----*/
	if (onThreadCreateError) return PostMessage(o_hwnd,0x462,t_id,0)//uid会被销毁，所以没必要再发送了
    //失败后直接退出线程

    var lock	= raw.buffer(5);//记录线程锁定状态
    var pBuf	= raw.toPointer( lock )
    print(string.format("子线程启动,ID:%d,UID:%s",t_id,t_uid))
    
    updateThreadTime = function(ptr,pos = 1){//写入当前时间到结构体
    	raw.copy( topointer( tonumber( ptr ) + pos ), {INT t = time.tick() },4) 
    }
    updateThreadTime(pBuf)
    //告知Server线程，自身已成功启动,并提供自身记录锁定状态的指针
    ::PostMessage(o_hwnd,0x461,t_id, tonumber( pBuf ) )
    
    //在子线程启动消息循环,注册一个消息钩子函数
    win.loopMessage(
    	function(msg){
    		//print("message",msg.message,msg.message - 0x400)
    		if (msg.message >= 0x400/*_WM_USER*/){

    			lock[1] = 1;//线程锁
    			updateThreadTime(pBuf)
    			
    			select(msg.message - 0x400/*_WM_USER*/) {
    				case (0x60) {
    					print(string.format("尝试终止线程ID：%d:",t_id))
    					win.quitMessage()
    				}
    				case (0x64){//收到线程消息
    					var event	= msg.lParam;
    					var ptr		= topointer(msg.wParam);

    					var tagMsg = ..raw.convert(ptr, hpServer.helper.messageStruct())
    					tagMsg.host 	= topointer(tagMsg.host);
    					tagMsg.method	= topointer(tagMsg.method);
						tagMsg.uri		= topointer(tagMsg.uri);
						tagMsg.pHeader	= topointer(tagMsg.pHeader);
						tagMsg.pData	= topointer(tagMsg.pData);

						var request,response = hpServer.message.buildRequest(tagMsg,socket)

						raw.realloc(0,tagMsg.host)
						raw.realloc(0,tagMsg.method)
						raw.realloc(0,tagMsg.uri)
						raw.realloc(0,tagMsg.pHeader)
						raw.realloc(0,tagMsg.pData)
						raw.realloc(0,ptr)
						
						if (onRequest) {
							try{
								onRequest(socket,event,request,response)
							}
							catch(e){
								io.print(e)
							}
						}
    				}
    			}
    			
    			updateThreadTime(pBuf)
    			lock[1] = 0;
    		}
    		else {
    			print("UnKnow Msg:",msg.message,"by",t_id)
    		}
    	} 
    ) 
	var ret;
	do{
		ret = ::User32.SendMessage(o_hwnd,0x463,t_id,0)
		if (!ret) sleep(1)
	}while(!ret)
	
	if (onThreadEnd) onThreadEnd(socket,t_id)
	
	print(string.format("子线程已终止，ID:%d,UID:%s:",t_id,t_uid))
	//必须要等待线程对象关闭后，才能释放
	collectgarbage("collect")
	win.delay(500)//等待消息发送
}

namespace subThread{
    
}
