
namespace hpServer.threadPool;

workThread = class {
    ctor( hwnd,uid,pSocket,callbackFunction ){
    	this.parent_hwnd = hwnd; //消息窗口句柄
    	this.lock = false;//线程是否工作中
    	this.curr_msg = null;//线程正在处理的消息
    	this.curr_index = 0;//线程正在处理的消息序号
    	this.uid = uid;//线程唯一标志
    	
    	this.create_time = ..time.tick();//创建时间
    	this.last_time = ..time.tick();//最后一个任务的时间
    	
    	this.callback = callbackFunction;

    	var hwnd,id = ..thread.create(..hpServer.threadPool.subThreadFunc,this.parent_hwnd,this.uid,pSocket,this.callback)
		if (!hwnd) return null; 
		
    	this.thread_hwnd = hwnd;
    	this.thread_id = id;
    	
    	this.pSignal = null;//记录锁定与否的指针；
    	this.wait_shutdown = false;
    	..table.gc(this,"close")
    	
    	this.count = 0;
    };
    setSignal = function(pSignal){
    	if (pSignal) this.pSignal = pSignal;
    }
    prepare = function(){
    	return (!!this.pSignal && !this.wait_shutdown); 
    }
    lock_statue = function(){
    	if (!this.pSignal) return null; 
    	this.lock,this.last_time = get_signal(this.pSignal);//在获取状态时一并更新时间
    	return this.lock; 
    }
    setClass = function(cls){//特殊的标记
    	this.cls = cls;
    }
    sendMsg = function(msg,event,index){
        //msg是数值型的指针
        this.count ++;
        
    	this.curr_msg = msg;
    	this.curr_index = index;
    	
    	return ::User32.PostThreadMessage(this.thread_id,0x464,msg,event)
    }
    getWorkMsg = function(){
    	if (this.lock_statue) return this.curr_msg;
    	return null,NO_RUN_TASK;
    }
    shutdown = function(force = false){
    	if (this.lock_statue() && !force) return false,TASK_LOCK;  
    	this.wait_shutdown = true;
    	::PostThreadMessage(this.thread_id,0x460,0,0);
    	return true; 
    }
    close = function(){
    	var uid = this.uid;
    	..raw.closehandle(this.thread_hwnd)
    	this.pSignal = null;
    	this = null;
    	return uid; 
    }
    statue = function(){
    	var lock = this.lock_statue();
    	return lock,(!lock)?(..time.tick()-this.last_time); 
    }
    info = function(){
    	return {
    		lock 		= this.lock_statue();
    		create_time = this.create_time;
    		free_time	= (!lock)?(..time.tick()-this.last_time);
    		id			= this.thread_id;
    		msg_index	= this.curr_index;
    		msg_ptr		= this.curr_msg;
    	}; 
    }
    
}

namespace workThread{
	NO_RUN_TASK = '没有正在执行的任务'
    TASK_LOCK = '任务正在执行当中'
    
    convert = ..raw.convert
    
    get_signal = function(pData){
    	return !!convert(pData,{BYTE lock}).lock, 
    			convert(topointer(tonumber(pData)+1),{INT t}).t; 
    }
}
