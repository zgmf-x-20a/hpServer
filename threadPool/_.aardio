import win.guid;

namespace hpServer;

threadPool = class {
    ctor( hwnd,socket, maxCount,minCount, maxTimeout, waitTimeout ){
		this.count	= 0;//线程数
		this.index	= 0;//线程ID
		this.pool	= {};//主消息池
		this.parent_hwnd = hwnd;
		this.errMsg = {};//错误消息池
		//线程创建参数
		this.maxCount	= maxCount:5;//此处可以增加算法
		this.minCount	= minCount:0;
		this.maxTimeout	= maxTimeout:180000 //3min,线程空闲超时
		this.waitTimeout= waitTimeout:10000 //10s,线程消息超时
		
		..io.print(..string.format("最大线程数:%d，线程空闲超时:%ds, 线程启动超时:%ds",this.maxCount,this.maxTimeout/1000,this.waitTimeout/1000))
		this.socket = socket;
		this.lock = false;
    };
    create = function(){//成功执行返回true,否则false,错误
        if (this.lock) return false,THREAD_POOL_LOCK;
        if (this.quit) return false,THREAD_WAIT_TO_QUIT; 
    	var work = workThread(this.parent_hwnd,
    						  tostring(..win.guid.create()),
    						  this.socket,
    						  { onThreadCreated = this.onThreadCreated;
    						    onRequest = this.onRequest;
    						    onThreadEnd	= this.onThreadEnd;
    						  })
    	if (work == null) return false,THREAD_CREATE_ERR;//创建失败
    	
    	//只有在此时才需要锁,其余时间都无锁
    	this.lock = true;
    	this.count ++;
    	this.index ++;
    	
    	var index = this.index;
    	this.lock = false;
    	
    	//准备加入线程池的信息
    	work.index = index;//让线程对象存储自身的序号；
    	
    	var uid = work.uid;
    	var t_id = work.thread_id;//在外部操作对象
    	var key = tostring(t_id)
    	this.pool[key] = work;
    	
    	return true,t_id,uid; 
    }
    signal = function(t_id,pSignal){//收到这个消息后，意味着线程创建成功了
        if (!t_id) return null; 
    	var key = tostring(t_id);
    	
    	var work = this.pool[key];
    	work.setSignal(pSignal)
    }
    setThreadCall = function(onThreadCreated,onRequest,onThreadEnd){
    	if (onThreadCreated) this.onThreadCreated = onThreadCreated;
    	if (onRequest)	    this.onRequest = onRequest;
    	if (onThreadEnd)	this.onThreadEnd = onThreadEnd;
    }
    destory = function(t_id,errText){//成功执行返回true,否则null或者false,错误
        if (!t_id) return null; 
        
        if (this.lock) return false,THREAD_POOL_LOCK;
        this.lock = true;
        
        var work = this.pool[tostring(t_id)];
    	var index = work.index;
    	
    	if (errText){
    		this.errMsg[tostring(index)] ={
    			thread_id = t_id;
    			errText = errText	
    		}
    	}
    	
    	work.close()
    	this.pool[tostring(t_id)] = null;
    	
    	this.count --;
    	this.lock = false
    	return true; 
    }
    shutdown = function(t_id,force){//主动销毁
    	if (!t_id) return null; 

        var work = this.pool[tostring(t_id)];
    	if (work) return work.shutdown(force)
    }
    getWorkThread = function(cls){//返回值依次为:是否可用，是否正常，...
        //此处线程不安全，不加锁了，先验证性能
    	for t_id,work in this.pool{
    		//Destory有可能在此时销毁work；create无所谓
    		//..io.print("t_id",t_id,"lock_statue",work.lock_statue(),"prepare",work.prepare())
    		if ( work.lock_statue() or (!work.prepare()) ) continue ;
    		if (cls) {
    			if work.cls !== cls continue ;//cls不同的，继续遍历
    		}
    		return true,true,t_id,work; 
    	}
    	if (this.count >= this.maxCount) return false,false,THREAD_MAX_COUNT;
    	return false,this.create(); //create的时候不一定可用，等待下一次get的时候重新判断状态 
    }
    sentTask = function(t,msg,index,wait){
        //应该先解析msg,判断cls类型
        var start_time = ..time.tick();
        var useable,ok,t_id,work,err;
        var delay = 1
    	do{
    		if (..time.tick() - start_time) >= this.waitTimeout return false,THREAD_WAIT_TIMEOUT;
    		
    		useable,ok,t_id,work = this.getWorkThread(/*cls*/);
    		if (!useable){
    			if (ok) delay = 50
    			..win.delay(delay)
    			continue ;	
    		} 
    		//发送数据
    		work.sendMsg(msg,t,index)
    		return true;//返回结果 
    		
    	}while(wait)
    }
    getStatue = function(t_id){
        var info = {};
        if (t_id){
            var work = this.pool[tostring(t_id)]
    		if (work) ..table.push(info,work.info())
    		return work; 
    	}
    	for t_id,work in this.pool{
    		..table.push(info,work.info())
    	}
    	return info; 
    }
    freeWorkThread = function(){ //此处线程不安全
    	var list = {};
    	for t_id, work in this.pool{
    		var lock,lasttime = work.statue();
    		if (!lock) && (lasttime > this.maxTimeout) && (!work.wait_shutdown) 
    			..table.push(list,t_id);	
    	}
    	for index = (1 + this.minCount);#list;1{
    		this.shutdown( list[ index ] )
    	}
    }
}

namespace threadPool{
    
	THREAD_CREATE_ERR	= '线程创建失败';
    THREAD_POOL_LOCK	= '线程池锁定中';
    THREAD_MAX_COUNT	= '线程池已达到最大值'
    THREAD_WAIT_TIMEOUT = '线程等待超时'
    THREAD_WAIT_TO_QUIT = '线程池正在等待退出'
    /*
    HP消息循环使用了0x40F以前的消息类型
    
    工作线程消息使用0x460-0x46F范围段:
    60:退出线程指令
    61:线程启动消息
    62:线程启动错误
    63:线程退出消息
    64:向子线程发送消息
    65:向主线程发送结果
    66:向主线程发送消息
    */
    
    import ..hpServer.threadPool.workThread
    import ..hpServer.threadPool.subThread
}

/**intellisense()
hpServer.threadPool() = hpServer需要用到的线程池\n!hpServerThreadCache
hpServer.threadPool(.(hwnd,socket, maxCount,minCount, maxTimeout, waitTimeout) = threadCache\n@1回调窗口句柄\n@2hpSocket\n@3最大线程数\n@4最小线程数\n@5空闲超时\n@6启动超时
end intellisense**/

/**intellisense(!hpServerThreadCache)
getWorkThread(.() = 返回可使用的工作线程，返回值为 是否可用，是否创建成功，线程ID，线程对象
shutdown(.(thread_id) = 关闭线程
sentTask(.(type,msg,index,wait) = 发送消息到任一空闲工作线程
end intellisense**/