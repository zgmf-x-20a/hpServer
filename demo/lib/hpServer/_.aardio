import win.ui;
import hpsocket.httpServer;
import web.json;

hpServer = class {
	ctor( bindPort,bindAddr,form, maxThreadCount,minThreadCount, maxTimeout, waitTimeout ){
		this._form = (type(form) == type.table)?form: ..win.form(text=form:"hpHttpServerLoop")
		if (type(form) != type.table) this._form.messageOnly();
		
		this.bindPort = bindPort;
		this.bindAddr = bindAddr;
			
		var socket = ..hpsocket.httpServer();
		socket.setSocketBufferSize(65536)
		this.socket = socket;
		
		socket.threadGlobal = { //每个线程创建时都获得此变量
		    loop_hwnd = this._form.hwnd;
		    waitTimeout = waitTimeout:10000//10秒超时
		}
		
		socket.onThreadCreated = function(){//线程创建前引入库文件
			import hpServer.helper;
			import wsock;
		}
		
		socket.onHandShake			= onHandShake;
		socket.onClose				= onClose;
		socket.onHeadersComplete	= onHeadersComplete;
		socket.onBody				= onBody;
		socket.onMessageComplete	= onMessageComplete;
		socket.onParseError			= onParseError;
		
		socket.onUpgrade			= onUpgrade;
		socket.onWsMessageHeader	= onWsMessageHeader;
		socket.onWsMessageBody		= onWsMessageBody;
		socket.onWsMessageComplete	= onWsMessageComplete;
		
		socket.maxConnectionCount	= 2000;
		socket.workerThreadCount	= 100;
		
		//-------------------消息池-------------------------
		this.msgCache = msgPool();//创建消息池;
		//-------------------线程池-------------------------
		this.threadCache = threadPool(this._form.hwnd,
										socket.pSocket,
										maxThreadCount:4,
										minThreadCount,
										maxTimeout:10000,
										waitTimeout);//创建线程池
		this.minThreadCount			= minThreadCount;
		
		this._form.wndproc = function(hwnd,message,wParam,lParam){ 
			if (message < 0x400) return ; 
			/****---------------只处理WM_USER消息-------------------****/
			select(message - 0x400) {
				case 1 { //onClose
					if (this.onStateChange) 
						this.onStateChange("onClose",wParam);
				}
				case 2 { //onHandShake
					if (this.onStateChange) 
						this.onStateChange("onHandShake",wParam);
				}
				case 5 { //onMessageComplete
					//加入消息池，尽快结束阻塞过程，以便HP继续接受新连接
					var index = this.msgCache.recv(1,lParam);
					return index;
				}
				case 7 { //onUpgrade
					if (this.onStateChange) 
						return this.onStateChange("onUpgrade",wParam);
				}
				case 0xA{ //onWsMessageComplete
					var index = this.msgCache.recv(2,lParam);
					return index;
				}
				case (0x61){//线程创建成功，回传锁指针
					var t_id = wParam;
					var ptr = topointer(lParam);
					if (t_id) this.threadCache.signal(t_id,ptr);
				}
				case (0x62){//线程创建失败
					var t_id = wParam;
					..io.print("Create Error")
					this.threadCache.destory(t_id)
				}
				case (0x63){//线程关闭前消息，立即更新线程池记录
					return this.threadCache.destory(wParam); //传t_id
				}
			}
		}
		this.loop = false;//循环标志
		..table.gc(this,"quit")
	};
	start = function(addr,port){
		addr = addr?addr:(this.bindAddr:"0.0.0.0")
		port = port?tonumber(port,10):(this.bindPort:8081)
		var statue = this.socket.start(addr,port)
		if (statue) this.initThread();
		return statue,addr,port,(!statue)?socket.lasterr():null; 
	}
	initThread = function(){//启动最低线程
		for i=1;minThreadCount;1{
			this.threadCache.create();
		}
	}
	updateThreadCall = function(){
		this.threadCache.setThreadCall(
			this.onThreadCreated,
			this.onRequest,
			this.onThreadEnd
		)
	}
	stop = function(){
		return this.socket.stop()
	}
	peekMessage = function(){
		var waitList = this.msgCache.waitMsg(); //返回消息的索引号列表
		if waitList {
			for i=1;#waitList;1{
				var index = waitList[i]
				var t,v = this.msgCache.peekMsg("recv",index)
				var ok,err = this.threadCache.sentTask(t,v,index,true)//等待
				if (ok) {
					this.msgCache.setNoWait(index)
				}
				else {
					if (this.onPeekMsgErr) this.onPeekMsgErr(index,err)//传递错误
				}
			}	
		}
	}
	clearWorkThread = function(){
		this.threadCache.freeWorkThread();
	}
	getThreadStatue = function(t_id){
		return this.threadCache.getStatue(t_id); 
	}
	quit = function(wait = true, timeout = 30000){//等待线程退出
		this.msgCache.lock = true;//锁住线程池
		this.msgCache.quit = true;//返回退出信息
		this.threadCache.quit = true;//禁止先建线程
		
		var thread_list = this.threadCache.getStatue();//获取线程信息,这是脏读；
		for i=1;#thread_list;1{
			var thr = thread_list[i]
			this.threadCache.shutdown(thr.id);//告诉每一个线程准备退出
		}
		
		if (wait){
			var quit_time = ..time.tick();
			do{
				thread_list = this.threadCache.getStatue()
				if ((..time.tick() - quit_time) >= timeout) break ;
				..win.delay(1)
			}while(#thread_list)
			..io.print("线程全部退出或超时")
		}
		this.socket.stop();
		this._form.close();
		this = null;
	}
	sendWsMessage = function(connId,message){
		if type(message) == type.table{
			//删除特殊函数过程
			if (type(message.writeError) == type.function) message.writeError = null;
			
			message = ..web.json.stringify(message,true);
		}
		
		if (this.beforeWsSent) {//记录发送
			this.beforeWsSent(connId,message)
		}
		
		return this.socket.sendWsMessage(connId,message);
	}
	loopMessage = function(func,clear_time = 15000,loop_count = 50){
		this.loop = true;
		
		if (func){
			func();
		}
		else {
			var timeout_check = ..time.tick();//记录超时设定
			var count = 0;
			
			while(this.loop){
    			count ++
				owner.peekMessage()
				if (..time.tick() - timeout_check >= clear_time){//15s清理一次
					timeout_check = ..time.tick();//
					owner.clearWorkThread()
				}
				if (count % loop_count = 0){
					count = 0
					..win.delay(1)
				}
			}
			owner.quit();//退出并关闭对象
		}	
	}
	quickMessage = function(){
		this.loop = false
	}
}

namespace hpServer{

	import hpServer.msgPool;
	import hpServer.threadPool;

	realloc = ..raw.realloc;
	sizeof	= ..raw.sizeof;
	concat	= ..raw.concat;

	onClose = function(hpHttpServer,connId,enOperation,errCode){
		::User32.SendMessageA(loop_hwnd,0x401,connId,"onClose");
	}
	
	onHandShake = function(hpHttpServer,connId,pClient){
		::User32.SendMessage(loop_hwnd,0x402,connId,0);
	}
	
	onHeadersComplete = function(hpHttpServer,connId){
		var conn_leng = hpHttpServer.getContentLength(connId)
		if (conn_leng >= 0) hpHttpServer.reallocString(connId,conn_leng)
	}
	
	onBody = function(hpHttpServer,connId,pData,len){
		hpHttpServer.appendString(connId,pData,len)
	}
	
	onMessageComplete = function(hpHttpServer,connId){
		if (hpHttpServer.isUpgrade(connId)){
			return 0; 	
		}
	
		var addr,port = hpHttpServer.getRemoteAddress(connId);
		var localAddr,localPort = hpHttpServer.getLocalAddress(connId)
		
		var msg = hpServer.helper.messageStruct();
		msg.msgType		= 1;
		msg.connId		= connId;
		msg.remoteAddr	= wsock.inet_addr(addr);
		msg.remotePort	= port;
		msg.localAddr	= wsock.inet_addr(localAddr);
		msg.localPort	= localPort;
		
		var pHost		= hpHttpServer.getHost(connId);
		pHost			= raw.realloc(#pHost,,pHost);
		
		var pMethod		= hpHttpServer.getMethod(connId)
		pMethod			= raw.realloc(#pMethod,,pMethod);
		
		var pUri		= hpHttpServer.getRequestUri(connId)
		pUri			= raw.realloc(#pUri,,pUri);
		
		var pHeader		= tostring(hpHttpServer.getAllHeaders(connId));
		pHeader			= raw.realloc(#pHeader,,pHeader)
		
		var pData		= hpHttpServer.getConnectionExtra(connId);
		var new_pData	= raw.realloc(raw.sizeof(pData))
		if (new_pData) {
			raw.copy(new_pData,pData,raw.sizeof(pData))
			raw.copy(topointer(tonumber(new_pData) - 4 ),
					{INT len = raw.sizeof(pData)}, 4)//回写头数据
		}
		
		
		msg.host		= tonumber(pHost);
		msg.method		= tonumber(pMethod);
		msg.uri			= tonumber(pUri);
		msg.pHeader		= tonumber(pHeader);
		msg.pData		= tonumber(new_pData);
		
		var pTag 		= raw.realloc(..raw.sizeof(msg),,msg)
		var index;
		do{
			index = ::User32.SendMessage(loop_hwnd,0x405,connId, pTag); //有锁的时候需要延时再次发送
			if (index == -1) hpHttpServer.disconnect(connId)//程序退出
			if (index == 0) sleep(1)	
		}while(index == 0)
		
		hpHttpServer.reallocString(connId,0)
	}
	
	onParseError = function(hpHttpServer,connId,errorCode,errorDesc){
		return 1; 
	}
	
	/*******-----------------WebSocket服务端处理过程------------------------*******/
	onUpgrade = function(hpHttpServer,connId,upgradeType){
		var ret = ::User32.SendMessage(loop_hwnd,0x407,connId,upgradeType);
		//有问题如何处理
		
		hpHttpServer.sendWsSwitchingProtocols(connId);
	}
	
	onWsMessageHeader = function(hpHttpServer,connId,final,reserved,opCode,mask,bodyLen){
		hpHttpServer.reallocString(connId,bodyLen)
	}
	
	onWsMessageBody = function(hpHttpServer,connId,pData,len){
		hpHttpServer.appendString(connId,pData,len);
	}
	
	onWsMessageComplete = function(hpHttpServer,connId){
		
		var addr,port = hpHttpServer.getRemoteAddress(connId);
		var state = hpHttpServer.getWsMessageState(connId)
		
		var msg = hpServer.helper.messageStruct();
		
		msg.msgType		= 2;
		msg.connId		= connId;
		msg.remoteAddr	= wsock.inet_addr(addr);
		msg.remotePort	= port;
		msg.final		= state.final;
		msg.reserved 	= state.reserved;
		msg.opCode 		= state.opCode;
		msg.mask 		= state.mask;
		msg.bodyLen 	= state.bodyLen;
		msg.bodyRemain 	= state.bodyRemain;
		
		var pData		= hpHttpServer.getConnectionExtra(connId);
		var new_pData	= raw.realloc(raw.sizeof(pData))
		if (new_pData) {
			raw.copy(new_pData,pData,raw.sizeof(pData))
			raw.copy(topointer(tonumber(new_pData) - 4 ),
					{INT len = raw.sizeof(pData)}, 4)//回写头文件
		}
		
		msg.pData		= tonumber(new_pData);
		
		var pTag 		= raw.realloc(..raw.sizeof(msg),,msg)
		var index;
		do{
			index = ::User32.SendMessage(loop_hwnd,0x40A,connId,pTag);
			if (index == -1) hpHttpServer.disconnect(connId)
			if (index == 0) sleep(1)
		}while(index == 0)
		
		hpHttpServer.reallocString(connId,0);
	}
}

/**intellisense()
hpServer() = 创建多线程hpHttpServer\n!hpServer.
hpServer(.(bindPort,bindAddr,form,maxThreadCount,minThreadCount,maxTimeout,waitTimeout) = 创建多线程hpHttpServer\n参数@1指定监听端口\n参数@2指定监听地址\n参数@3指定消息窗口\n参数@4、@5分别指定最大、最小线程数，默认4,0\n参数@6指定线程闲置超时\n参数@7指定线程启动超时
end intellisense**/

/**intellisense(!hpServer)
socket = hpHttpServer.
start(.(addr,port) = 启动监听事件\n省略参数@1,@2则用默认地址及端口开始监听
initThread(.() = 直接启动最低的工作线程数，不再动态启动
updateThreadCall(.() = 更新线程回调函数，此函数应该在工作线程启动前执行
stop(.() = 停止监听事件
peekMessage(.() = 检查并分配消息到工作线程，此函数应循环执行，否则工作线程无法收到消息
clearWorkThread(.() = 清理空闲超时的工作线程，回收系统资源
getThreadStatue(.(thread_id) = 返回数组，含有指定工作线程的信息\n省略参数@1则返回所有线程的信息\n该函数为脏读，不应通过该函数直接处理线程池
quit(.(wait,wait_timeout) = 关闭hpServer，并销毁自身\n参数@1为是否等待工作线程执行完毕，参数@2为等待超时毫秒数\n默认参数是true,30000
sendWsMessage(.(connId,message) = 向指定connId发送WS消息，具体请参考hpHttpServer对象
msgCache = !hpServerMsgCache.
threadCache = !hpServerThreadCache.
quickMessage(.() = 退出消息循环
loopMessage(.(func,clear_time,loop_count) = 启动消息循环\n参数@1可以指定函数替代默认的循环函数，通过server.loop获取循环状态\n参数@2指定默认函数下清理空闲线程的时间\n参数@3指定默认函数下，需要经过多少次循环才执行win.delay
onThreadCreated = @.onThreadCreated = function(hpHttpServer,thread_id){
	__/*工作线程启动时触发，请注意作用域\n onThreadCreateError设置为True后，工作线程将直接退出\n设置后需要调用updateThreadCall()*/
	onThreadCreateError = false;
}
onThreadEnd = @.onThreadEnd = function(hpHttpServer,thread_id){
	__/*工作线程退出前触发\n设置后需要调用updateThreadCall()*/
}
onRequest = @.onRequest = function(hpHttpServer,event,request,response){
	__/*工作线程处理响应时触发，
		event 1、2分别代表Http,Ws消息
		request 请求信息，具体请看message.httpRequestSimple、wsMessageSimple
		response 响应对象，具体查看message.httpResponse、websocketTask
		\n设置后需要调用updateThreadCall()
		*/
}
onStateChange = @.onStateChange = function(statue,connId){
    /*该回调在Server线程中触发*/
	select (statue){
   		case "onClose"{
   			__
   		}
   		case "onHandShake"{
   			
   		}
   		case "onUpgrade"{
   			
   		}
   	}
}
end intellisense**/